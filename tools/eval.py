#!/usr/bin/env python3
"""
CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python tools/eval.py [--trace] [--mode PRECISE_SIMPLE|HYBRID_TIGHT]
"""

import os
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

def load_test_queries() -> List[Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return [
        {
            "query": "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è",
            "expected_topic": "prices",
            "expected_file": "prices-implant.md"
        },
        {
            "query": "–∞–¥—Ä–µ—Å –∫–ª–∏–Ω–∏–∫–∏",
            "expected_topic": "contacts", 
            "expected_file": "clinic-contacts.md"
        },
        {
            "query": "–±–æ–ª—å–Ω–æ –ª–∏ —Å—Ç–∞–≤–∏—Ç—å –∏–º–ø–ª–∞–Ω—Ç",
            "expected_topic": "safety",
            "expected_file": "faq-implants-pain.md"
        },
        {
            "query": "–∫–∞–∫–∏–µ –≤—Ä–∞—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç",
            "expected_topic": "doctors",
            "expected_file": "doctors.md"
        },
        {
            "query": "–≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –∏–º–ø–ª–∞–Ω—Ç—ã",
            "expected_topic": "warranty",
            "expected_file": "warranty.md"
        },
        {
            "query": "–ø—Ä–∏–∂–∏–≤–∞–µ–º–æ—Å—Ç—å –∏–º–ø–ª–∞–Ω—Ç–æ–≤",
            "expected_topic": "safety",
            "expected_file": "faq-implants-osseointegration.md"
        },
        {
            "query": "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è",
            "expected_topic": "consultation",
            "expected_file": "consultation-free.md"
        },
        {
            "query": "–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∫ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏",
            "expected_topic": "safety",
            "expected_file": "implants-contraindications.md"
        },
        {
            "query": "–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∫–ª–∏–Ω–∏–∫–∏",
            "expected_topic": "contacts",
            "expected_file": "clinic-contacts.md"
        },
        {
            "query": "—Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –∏–º–ø–ª–∞–Ω—Ç–∞—Ü–∏–∏",
            "expected_topic": "implants",
            "expected_file": "faq-implants-duration.md"
        }
    ]

def run_single_test(query_data: Dict[str, Any], trace: bool = False) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RAG engine
        from rag_engine import get_rag_answer
        
        query = query_data["query"]
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{query}'")
        
        # –í—ã–∑—ã–≤–∞–µ–º RAG
        start_time = datetime.now()
        response, metadata = get_rag_answer(query)
        end_time = datetime.now()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "query": query,
            "expected_topic": query_data["expected_topic"],
            "expected_file": query_data["expected_file"],
            "response_type": type(response).__name__,
            "has_response": bool(response),
            "response_length": len(str(response)) if response else 0,
            "metadata_keys": list(metadata.keys()) if metadata else [],
            "execution_time_ms": (end_time - start_time).total_seconds() * 1000,
            "success": True,
            "error": None
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if metadata:
            result["relevance_score"] = metadata.get("relevance_score", 0.0)
            result["cand_cnt"] = metadata.get("cand_cnt", 0)
            result["theme_hint"] = metadata.get("theme_hint")
            result["best_chunk_id"] = metadata.get("best_chunk_id")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
            if result["theme_hint"] == query_data["expected_topic"]:
                result["topic_match"] = True
            else:
                result["topic_match"] = False
                
            if result["best_chunk_id"] and query_data["expected_file"] in result["best_chunk_id"]:
                result["file_match"] = True
            else:
                result["file_match"] = False
        else:
            result["topic_match"] = False
            result["file_match"] = False
        
        if trace:
            result["full_response"] = response
            result["full_metadata"] = metadata
            
        return result
        
    except Exception as e:
        return {
            "query": query_data["query"],
            "expected_topic": query_data["expected_topic"],
            "expected_file": query_data["expected_file"],
            "success": False,
            "error": str(e),
            "execution_time_ms": 0
        }

def run_dryrun(mode: str = None, trace: bool = False) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç dryrun —Ç–µ—Å—Ç—ã"""
    print(f"üß™ –ó–∞–ø—É—Å–∫ dryrun —Ç–µ—Å—Ç–æ–≤...")
    if mode:
        print(f"üìã –†–µ–∂–∏–º: {mode}")
        os.environ["RAG_MODE"] = mode
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = load_test_queries()
    print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_queries)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    results = []
    total_time = 0
    successful_tests = 0
    topic_matches = 0
    file_matches = 0
    
    for i, query_data in enumerate(test_queries, 1):
        print(f"\n--- –¢–µ—Å—Ç {i}/{len(test_queries)} ---")
        result = run_single_test(query_data, trace)
        results.append(result)
        
        total_time += result["execution_time_ms"]
        
        if result["success"]:
            successful_tests += 1
            if result.get("topic_match"):
                topic_matches += 1
            if result.get("file_match"):
                file_matches += 1
                
            print(f"‚úÖ –£—Å–ø–µ—Ö: {result['execution_time_ms']:.1f}ms")
            if result.get("topic_match"):
                print(f"   üéØ –¢–µ–º–∞ —Å–æ–≤–ø–∞–ª–∞: {result['theme_hint']}")
            if result.get("file_match"):
                print(f"   üìÑ –§–∞–π–ª —Å–æ–≤–ø–∞–ª: {result['best_chunk_id']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = {
        "timestamp": datetime.now().isoformat(),
        "mode": os.getenv("RAG_MODE", "PRECISE_SIMPLE"),
        "total_tests": len(test_queries),
        "successful_tests": successful_tests,
        "failed_tests": len(test_queries) - successful_tests,
        "topic_matches": topic_matches,
        "file_matches": file_matches,
        "avg_execution_time_ms": total_time / len(test_queries) if test_queries else 0,
        "success_rate": successful_tests / len(test_queries) if test_queries else 0,
        "topic_match_rate": topic_matches / successful_tests if successful_tests else 0,
        "file_match_rate": file_matches / successful_tests if successful_tests else 0,
        "results": results
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logs_dir = Path("logs/eval")
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    result_file = logs_dir / f"dryrun_{timestamp}.json"
    
    with open(result_file, "w", encoding="utf-8") as f:
        json.dump(summary, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –°–í–û–î–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['successful_tests']}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['failed_tests']}")
    print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–µ–º: {summary['topic_matches']}")
    print(f"   –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤: {summary['file_matches']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {summary['avg_execution_time_ms']:.1f}ms")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1%}")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å —Ç–µ–º: {summary['topic_match_rate']:.1%}")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤: {summary['file_match_rate']:.1%}")
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {result_file}")
    
    return summary

def main():
    parser = argparse.ArgumentParser(description="CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-–ø–∞–π–ø–ª–∞–π–Ω–∞")
    parser.add_argument("--trace", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    parser.add_argument("--mode", choices=["PRECISE_SIMPLE", "HYBRID_TIGHT"], 
                       help="–†–µ–∂–∏–º RAG –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    try:
        summary = run_dryrun(args.mode, args.trace)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        if summary["failed_tests"] > 0:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ {summary['failed_tests']} —Ç–µ—Å—Ç–∞—Ö")
            sys.exit(1)
        
        if summary["success_rate"] < 0.8:
            print(f"\n‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1%}")
            sys.exit(1)
            
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

