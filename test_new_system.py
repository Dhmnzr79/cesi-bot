#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rag_engine

def test_new_architecture():
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    print(f"‚úÖ CANON: {rag_engine.CANON}")
    print(f"‚úÖ ALIAS_MAP_GLOBAL: {len(rag_engine.ALIAS_MAP_GLOBAL)} –∞–ª–∏–∞—Å–æ–≤")
    print(f"‚úÖ H2_INDEX: {len(rag_engine.H2_INDEX)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
    print(f"‚úÖ FILE_META: {len(rag_engine.FILE_META)} —Ñ–∞–π–ª–æ–≤")
    print(f"‚úÖ ALL_CHUNKS: {len(rag_engine.ALL_CHUNKS)} —á–∞–Ω–∫–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∞–ª–∏–∞—Å—É
    test_queries = [
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∫–ª–∏–Ω–∏–∫–µ",
        "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 
        "—Ü–µ–Ω—ã",
        "–≤—Ä–∞—á–∏"
    ]
    
    for query in test_queries:
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: '{query}'")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
        try:
            chunks, flags = rag_engine.retrieve_relevant_chunks_new(
                query, 
                None, 
                lambda q: rag_engine.hybrid_retriever(q, 5)
            )
            
            print(f"  üéØ –ù–∞–π–¥–µ–Ω–æ: {len(chunks)} —á–∞–Ω–∫–æ–≤")
            print(f"  üìä –§–ª–∞–≥–∏: {flags}")
            
            if chunks:
                chunk = chunks[0]
                print(f"  üìÑ –§–∞–π–ª: {chunk.file_name}")
                print(f"  üìù –¢–µ–∫—Å—Ç: {chunk.text[:100]}...")
        
    except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_new_architecture()